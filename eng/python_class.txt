 ____        _   _                 
|  _ \ _   _| |_| |__   ___  _ __  
| |_) | | | | __| '_ \ / _ \| '_ \ 
|  __/| |_| | |_| | | | (_) | | | |
|_|    \__, |\__|_| |_|\___/|_| |_|
       |___/                       


[[ DATA_STRUCTURES ]]
    all data structure examples are from: https://docs.python.org/2/tutorial/datastructures.html

[[ LISTS ]]
    Count method tells you how many times an element appears in a list
    has a sort method. you can override the key it compares on 
    >>> l.append('c')                                                                                                       
    >>> l                                                                                                                   
    ['a', 'b', 'c', 'c'] 
    >>> l.count('c')                                                                                                        
    2 

    Can use like a stack via append/pop
    >>> l.pop()                                                                                                             
    'c'                                                                                                                     
    >>> l                                                                                                                   
    ['a', 'b', 'c']

    Or a queue with pop(0)
    ['a', 'b', 'c', 'd']                                                                                                    
    >>> l.pop(0)                                                                                                            
    'a'                                                                                                                     

    [[ FUNCTIONAL TOOLS ]]
        map, reduce, filter
        https://docs.python.org/2/tutorial/datastructures.html#functional-programming-tools

[[ SETS ]]
    Python also includes a data type for sets. A set is an unordered collection with 
    no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. 
    Set objects also support mathematical operations like union, intersection, difference, 
    and symmetric difference.

    >>> # Demonstrate set operations on unique letters from two words
    ...
    >>> a = set('abracadabra')
    >>> b = set('alacazam')
    >>> a                                  # unique letters in a
    set(['a', 'r', 'b', 'c', 'd'])
    >>> a - b                              # letters in a but not in b
    set(['r', 'd', 'b'])
    >>> a | b                              # letters in either a or b
    set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])
    >>> a & b                              # letters in both a and b
    set(['a', 'c'])
    >>> a ^ b                              # letters in a or b but not both
    set(['r', 'd', 'b', 'm', 'z', 'l'])

[[ DICTIONARIES ]]
    It is best to think of a dictionary as an unordered set of key: value pairs, 
    with the requirement that the keys are unique
    item is the (key : value)
    >>> tel = {'jack': 4098, 'sape': 4139}
    >>> tel['guido'] = 4127
    >>> tel
    {'sape': 4139, 'guido': 4127, 'jack': 4098}
    >>> tel.items()                                                                                                         
    [('sape', 4139), ('jack', 4098), ('guido', 4127)]                                                                       
    >>> tel.keys()                                                                                                          
    ['sape', 'jack', 'guido']                                                                                               
    >>> tel.values()                                                                                                        
    [4139, 4098, 4127]  

[[ LIST_COMPREHENSIONS ]]
    "yoda talk" 
    [<what you wanna do> <what you're iterating over> <condition>]

    >>> [i**2 for i in range(10) if i > 5]                                                                                  
    [36, 49, 64, 81]

    from: https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions
    >>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
    [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

    >>> # flatten a list using a listcomp with two 'for'
    >>> vec = [[1,2,3], [4,5,6], [7,8,9]]
    >>> [num for elem in vec for num in elem]
    [1, 2, 3, 4, 5, 6, 7, 8, 9]

[[ GENERATOR_EXPRESSIONS ]]
    similar to list comprehensions but are lazy

    for an example of more generalized generators see:
    http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#example-generator

[[ BUILT_IN_FUNCTIONS ]]
    https://docs.python.org/2/library/functions.html
    zip (see also itertools' izip) - combine two lists together into a list of tuples
        >>> x = [1,2,3] 
        >>> y = [4,5,6] 
        >>> zip(x,y) 
        [(1, 4), (2, 5), (3, 6)]

    xrange - yields the same values as the corresponding list, without actually storing them all simultaneously
    sum
    round
    sorted
    any, all
    del?
    open - open a file
    
[[ ITERTOOLS ]]
    https://docs.python.org/2/library/itertools.html
    product('ABCD', repeat=2)                       AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD
    permutations('ABCD', 2)                         AB AC AD BA BC BD CA CB CD DA DB DC
    combinations('ABCD', 2)                         AB AC AD BC BD CD
    combinations_with_replacement('ABCD', 2)	 	AA AB AC AD BB BC BD CC CD DD

    groupby:  https://docs.python.org/2/library/itertools.html#itertools.groupby
    compress: https://docs.python.org/2/library/itertools.html#itertools.compress

[[ FILE_IO ]]
    first method: with open (context manager)
    with open('filename.txt', file_mode) as filename:
        for line in filename.readlines():
            <process line>

    second method: file function
    f = file('filename.txt', filemode)
    f.close() #DON'T FORGET TO CLOSE THE FILE

    links:
    description of file modes from..
    http://www.tutorialspoint.com/python/python_files_io.htm
    r	Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode.
    rb	Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode.
    r+	Opens a file for both reading and writing. The file pointer placed at the beginning of the file.
    rb+	Opens a file for both reading and writing in binary format. The file pointer placed at the beginning of the file.
    w	Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.
    wb	Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.
    w+	Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.

    http://www.codecademy.com/courses/python-intermediate-en-OGNHh/0/1

[[ CSV_FILES ]]
    import csv
    csv_file = csv.reader(file, delimiter = ',')
    for row in csv_file:
        row[fieldnumber]

[[ PARSING ]]

    [[ STRIPPING ]]
        strip - removes whitespace from the beginning/end of strings
        lstrip - remove leading whitespace
        rstrip - remove trailing whitespace

        example code
        my_string = "blah, lots  ,  of ,  spaces, here "
        [x.strip() for x in my_string.split(',')]

    [[ SPLITTING ]]
        >>> string = ' first, second, third '                                                                                   
        >>> string                                                                                                              
        ' first, second, third '                                                                                                
        >>> string.strip()                                                                                                      
        'first, second, third'                                                                                                  
        >>> string.rstrip()                                                                                                     
        ' first, second, third'                                                                                                 
        >>> string.lstrip()                                                                                                     
        'first, second, third ' 
        >>>[i.strip() for i in string.split(',')]                                                                              
        ['first', 'second', 'third']

    [[ SLICING ]]
        usually you just use [start:stop]
        but you can specify a step or value to increment by: [start:stop:increment]
        you can leave out start or stop too, meaning 'everything up until the nth position' or
        everything after the nth position:
        [:n] or [n:]

        Example Code
        >>> array = string.split(',')
        >>> array
        ['first', ' second', ' third']
        >>> array[:2]
        ['first', ' second']
        >>> array[0:3:1]
        ['first', ' second', ' third']
        >>> array[0:3:2]
        ['first', ' third']

        links:
        https://pythonhosted.org/bitstring/slicing.html

    [[ JOINING ]]
        join an array together with the delimiter char(s) you specify

        >>> array 
        ['first', 'second', 'third']

        >>> ",".join(array)
        'first,second,third'

        >>> print '\n'.join(array)
        first
        second
        third

    [[ REGULAR_EXPRESSIONS ]]
        see regex_class.txt
        https://docs.python.org/2/library/re.html
        import re
        re.search(pattern, file)
        re.search(pattern, file).group(groupnumber)

        from: https://docs.python.org/2/howto/regex.html
        p = re.compile('\d+')
        p.findall('12 drummers drumming, 11 pipers piping, 10 lords a-leaping')
        ['12', '11', '10']

        https://automatetheboringstuff.com/chapter7/

[[ DEBUGGING ]]
    most GUI IDE's will have a built-in debugger of some sort
    pudb - best command line tracing program. 
    pdb, or pydbgr, and ipdb are also available.

[[ SPECIAL_TOPICS ]]

    [[ COMMAND_LINE_INTERFACING ]]
        import argparse
        parser = argparse.ArgumentParser(description=discription_message)
        parser.add_argument("-f", "--file", required=True, dest="input_file", help="file to import")
        parser.add_argument("-m", "--max_percentage", dest="max_percentage", type=float, default=.6, help="drop rows with")
        args = parser.parse_args()
        args.input_file #now contains the file supplied at runtime

    [[ HTML_PARSING ]]
        beautiful soup examples
        https://automatetheboringstuff.com/chapter11/

    [[ PANDAS ]]
        read_csv - thousands, delimiter
        del df[col]
        isfinite
        pivots
