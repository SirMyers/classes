 ____        _   _                 
|  _ \ _   _| |_| |__   ___  _ __  
| |_) | | | | __| '_ \ / _ \| '_ \ 
|  __/| |_| | |_| | | | (_) | | | |
|_|    \__, |\__|_| |_|\___/|_| |_|
       |___/                       


[[ DATA STRUCTURES ]]
all data structure examples are from: https://docs.python.org/2/tutorial/datastructures.html

[[ LISTS ]]
    count method tells you how many times an element appears in a list
    can use like a stack via append/pop
    has a sort method. you can override the key it compares on 

    [[ FUNCTIONAL TOOLS ]]
    map, reduce, filter
    https://docs.python.org/2/tutorial/datastructures.html#functional-programming-tools

[[ SETS ]]
    Python also includes a data type for sets. A set is an unordered collection with 
    no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. 
    Set objects also support mathematical operations like union, intersection, difference, 
    and symmetric difference.

    >>> # Demonstrate set operations on unique letters from two words
    ...
    >>> a = set('abracadabra')
    >>> b = set('alacazam')
    >>> a                                  # unique letters in a
    set(['a', 'r', 'b', 'c', 'd'])
    >>> a - b                              # letters in a but not in b
    set(['r', 'd', 'b'])
    >>> a | b                              # letters in either a or b
    set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])
    >>> a & b                              # letters in both a and b
    set(['a', 'c'])
    >>> a ^ b                              # letters in a or b but not both
    set(['r', 'd', 'b', 'm', 'z', 'l'])

[[ DICTIONARIES ]]
    It is best to think of a dictionary as an unordered set of key: value pairs, 
    with the requirement that the keys are unique
    >>> tel = {'jack': 4098, 'sape': 4139}
    >>> tel['guido'] = 4127
    >>> tel
    {'sape': 4139, 'guido': 4127, 'jack': 4098}

[[ LIST COMPREHENSIONS ]]
    from: https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions
    >>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
    [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

    >>> # flatten a list using a listcomp with two 'for'
    >>> vec = [[1,2,3], [4,5,6], [7,8,9]]
    >>> [num for elem in vec for num in elem]
    [1, 2, 3, 4, 5, 6, 7, 8, 9]

[[ GENERATOR EXPRESSIONS ]]
    similar to list comprehensions but are lazy

    for an example of more generalized generators see:
    http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#example-generator

[[ ITERATORS ]]

[[ file i/o ]]
    with open('myfile', (read 'r', write 'w', append 'a', +)) as filename:
        for line in filename.readlines():
            process line

    links:
    http://www.codecademy.com/courses/python-intermediate-en-OGNHh/0/1
[[ csv files ]]
    import csv
    csv_file = csv.reader(file, delimiter = ',')
    for row in csv_file:
        row[fieldnumber]


[[ PARSING ]]

[[ stripping ]]
    strip - removes whitespace from the beginning/end of strings
    lstrip - remove leading whitespace
    rstrip - remove trailing whitespace

    example code
    my_string = "blah, lots  ,  of ,  spaces, here "
    [x.strip() for x in my_string.split(',')]

[[ splitting ]]
    >>> string = 'first, second, third'
    >>> string.split(',')
    ['first', ' second', ' third']

[[ slicing ]]
    usually you just use [start:stop]
    but you can specify a step or value to increment by: [start:stop:increment]
    you can leave out start or stop too, meaning 'everything up until the nth position' or
    everything after the nth position:
    [:n] or [n:]

    Example Code
    >>> array = string.split(',')
    >>> array
    ['first', ' second', ' third']
    >>> array[:2]
    ['first', ' second']
    >>> array[0:3:1]
    ['first', ' second', ' third']
    >>> array[0:3:2]
    ['first', ' third']

    links:
    https://pythonhosted.org/bitstring/slicing.html


[[ joining ]]
    join an array together with the delimiter char(s) you specify

    Code
    >>> ",".join(array)
    'first, second, third'

    >>> print '\n'.join(array)
    first
    second
    third


[[ REGULAR EXPRESSIONS ]]
    https://docs.python.org/2/library/re.html
    import re
    re.search(pattern, file)
    re.search(pattern, file).group(groupnumber)

    from: https://docs.python.org/2/howto/regex.html
    p = re.compile('\d+')
    p.findall('12 drummers drumming, 11 pipers piping, 10 lords a-leaping')
    ['12', '11', '10']

[[ COMMAND LINE INTERFACING ]]

    import getopt, sys
    try:                                
        opts, args = getopt.getopt(sys.argv[1:], "hf:D", ["col_name=", "help"])
        flags = [i[0] for i in opts]
        if '-f' not in flags:
            raise getopt.GetoptError(0)
    except getopt.GetoptError:          
        print 'PARAMETER ERROR multi_apportoinment.py: -f not provided\n' 
        usage()                         
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-h': usage(); sys.exit(0)
        if opt == '-f': input_file = str(arg)
        if opt == '-D': debug_mode = True; print 'Entering debug mode...\n'
        if opt == '--help': usage(); sys.exit(0)
        if opt == '--col_name': target_column = str(arg)

[[ PANDAS ]]
    read_csv - thousands, delimiter
    del df[col]
    isfinite
    pivots
